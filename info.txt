diff --git a/LPP/Form1.Designer.cs b/LPP/Form1.Designer.cs
index 05be7ec..4ef28ac 100644
--- a/LPP/Form1.Designer.cs
+++ b/LPP/Form1.Designer.cs
@@ -25,13 +25,45 @@
         /// the contents of this method with the code editor.
         /// </summary>
         private void InitializeComponent () {
-            this.components = new System.ComponentModel.Container ();
+            this.inputTextBox = new System.Windows.Forms.TextBox();
+            this.processInput = new System.Windows.Forms.Button();
+            this.SuspendLayout();
+            // 
+            // inputTextBox
+            // 
+            this.inputTextBox.Location = new System.Drawing.Point(12, 12);
+            this.inputTextBox.Name = "inputTextBox";
+            this.inputTextBox.Size = new System.Drawing.Size(194, 20);
+            this.inputTextBox.TabIndex = 0;
+            // 
+            // processInput
+            // 
+            this.processInput.Location = new System.Drawing.Point(12, 38);
+            this.processInput.Name = "processInput";
+            this.processInput.Size = new System.Drawing.Size(75, 23);
+            this.processInput.TabIndex = 1;
+            this.processInput.Text = "Process";
+            this.processInput.UseVisualStyleBackColor = true;
+            this.processInput.Click += new System.EventHandler(this.processInput_Click);
+            // 
+            // Form1
+            // 
+            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
             this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
-            this.ClientSize = new System.Drawing.Size (800, 450);
+            this.ClientSize = new System.Drawing.Size(800, 450);
+            this.Controls.Add(this.processInput);
+            this.Controls.Add(this.inputTextBox);
+            this.Name = "Form1";
             this.Text = "Form1";
+            this.ResumeLayout(false);
+            this.PerformLayout();
+
         }
 
         #endregion
+
+        private System.Windows.Forms.TextBox inputTextBox;
+        private System.Windows.Forms.Button processInput;
     }
 }
 
diff --git a/LPP/Form1.cs b/LPP/Form1.cs
index 9f6f963..e283d64 100644
--- a/LPP/Form1.cs
+++ b/LPP/Form1.cs
@@ -2,6 +2,7 @@
 using System.Collections.Generic;
 using System.ComponentModel;
 using System.Data;
+using System.Diagnostics;
 using System.Drawing;
 using System.Linq;
 using System.Text;
@@ -12,8 +13,16 @@ namespace LPP
 {
     public partial class Form1 : Form
     {
+        Processor mainUnit;
+
         public Form1 () {
             InitializeComponent ();
+
+            mainUnit = new Processor ();
+        }
+
+        private void processInput_Click (object sender, EventArgs e) {
+            string input = inputTextBox.Text.Replace (" ", "");
         }
     }
 }
diff --git a/LPP/LPP.csproj b/LPP/LPP.csproj
index 8ef43d4..be58de0 100644
--- a/LPP/LPP.csproj
+++ b/LPP/LPP.csproj
@@ -63,6 +63,9 @@
     <Compile Include="Processor.cs" />
     <Compile Include="Program.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
+    <EmbeddedResource Include="Form1.resx">
+      <DependentUpon>Form1.cs</DependentUpon>
+    </EmbeddedResource>
     <EmbeddedResource Include="Properties\Resources.resx">
       <Generator>ResXFileCodeGenerator</Generator>
       <LastGenOutput>Resources.Designer.cs</LastGenOutput>
diff --git a/LPP/Nodes/Node.cs b/LPP/Nodes/Node.cs
index 2b9c12a..8d2578b 100644
--- a/LPP/Nodes/Node.cs
+++ b/LPP/Nodes/Node.cs
@@ -12,8 +12,11 @@ namespace LPP.Nodes
         public Node right;
         public Node parent;
 
-        public string value;
-        public int number;
+        protected readonly string value;
+        protected readonly int number;
+
+        public string Value { get { return value; } }
+        public int NodeNumber { get { return number; } }
 
         public Node () {
             number = ++GlobalCounter.nodes_count;
diff --git a/LPP/Processor.cs b/LPP/Processor.cs
index fbb9c55..96086c3 100644
--- a/LPP/Processor.cs
+++ b/LPP/Processor.cs
@@ -40,5 +40,51 @@ namespace LPP
                     throw new Exception ("String processing went wrong. Source: class Processor, method ProcessStringInput(string input)");
             }
         }
+
+        // TODO: Correct building of the tree. Example input that should work: =( >(A,B), |( ~(A) ,B) )
+        private void BuildTree(string input, Node root) {
+            if (input == string.Empty) return;
+
+            char first_character = input[0];
+            
+            if (first_character == '~') {
+
+                NotNode node = new NotNode (input, root);
+                root.Insert (node);
+                BuildTree (node.Value, node);
+
+            } else if (first_character == '>') {
+
+                ImplicationNode node = new ImplicationNode (input, root);
+                root.Insert (node);
+                BuildTree (node.Value, node);
+
+
+            } else if (first_character == '=') {
+
+                BiImplicationNode node = new BiImplicationNode (input, root);
+                root.Insert (node);
+                BuildTree (node.Value, node);
+
+            } else if (first_character == '&') {
+
+                ConjunctionNode node = new ConjunctionNode (input, root);
+                root.Insert (node);
+                BuildTree (node.Value, node);
+
+            } else if (first_character == '|') {
+
+                DisjunctionNode node = new DisjunctionNode (input, root);
+                root.Insert (node);
+                BuildTree (node.Value, node);
+
+            } else if (first_character == ',') {
+                if (root.parent == null) throw new Exception ("Error in your input");
+
+                root = root.parent;
+                input = input.Substring (1);
+                BuildTree (input, root);
+            }
+        }
     }
 }
